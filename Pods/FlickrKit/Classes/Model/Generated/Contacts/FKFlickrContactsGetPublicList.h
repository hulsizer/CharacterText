//
//  FKFlickrContactsGetPublicList.h
//  FlickrKit
//
//  Generated by FKAPIBuilder on 19 Sep, 2014 at 10:49.
//  Copyright (c) 2013 DevedUp Ltd. All rights reserved. http://www.devedup.com
//
//  DO NOT MODIFY THIS FILE - IT IS MACHINE GENERATED


#import "FKFlickrAPIMethod.h"

typedef enum {
	FKFlickrContactsGetPublicListError_UserNotFound = 1,		 /* The specified user NSID was not a valid user. */
	FKFlickrContactsGetPublicListError_InvalidAPIKey = 100,		 /* The API key passed was not valid or has expired. */
	FKFlickrContactsGetPublicListError_ServiceCurrentlyUnavailable = 105,		 /* The requested service is temporarily unavailable. */
	FKFlickrContactsGetPublicListError_WriteOperationFailed = 106,		 /* The requested operation failed due to a temporary issue. */
	FKFlickrContactsGetPublicListError_FormatXXXNotFound = 111,		 /* The requested response format was not found. */
	FKFlickrContactsGetPublicListError_MethodXXXNotFound = 112,		 /* The requested method was not found. */
	FKFlickrContactsGetPublicListError_InvalidSOAPEnvelope = 114,		 /* The SOAP envelope send in the request could not be parsed. */
	FKFlickrContactsGetPublicListError_InvalidXMLRPCMethodCall = 115,		 /* The XML-RPC request document could not be parsed. */
	FKFlickrContactsGetPublicListError_BadURLFound = 116,		 /* One or more arguments contained a URL that has been used for abuse on Flickr. */

} FKFlickrContactsGetPublicListError;

/*

Get the contact list for a user.

<p>See <a href="/services/api/flickr.contacts.getList.html">flickr.contacts.getList</a> for an explanation of the response.</p>

Response:

<contacts page="1" pages="1" perpage="1000" total="3">
	<contact nsid="12037949629@N01" username="Eric" iconserver="1" ignored="1" /> 
	<contact nsid="12037949631@N01" username="neb" iconserver="1" ignored="0" /> 
	<contact nsid="41578656547@N01" username="cal_abc" iconserver="1" ignored="0" />
</contacts>

*/
@interface FKFlickrContactsGetPublicList : NSObject <FKFlickrAPIMethod>

/* The NSID of the user to fetch the contact list for. */
@property (nonatomic, copy) NSString *user_id; /* (Required) */

/* The page of results to return. If this argument is omitted, it defaults to 1. */
@property (nonatomic, copy) NSString *page;

/* Number of photos to return per page. If this argument is omitted, it defaults to 1000. The maximum allowed value is 1000. */
@property (nonatomic, copy) NSString *per_page;


@end
