//
//  FKFlickrContactsGetList.h
//  FlickrKit
//
//  Generated by FKAPIBuilder on 19 Sep, 2014 at 10:49.
//  Copyright (c) 2013 DevedUp Ltd. All rights reserved. http://www.devedup.com
//
//  DO NOT MODIFY THIS FILE - IT IS MACHINE GENERATED


#import "FKFlickrAPIMethod.h"

typedef enum {
	FKFlickrContactsGetListError_InvalidSortParameter = 1,		 /* The possible values are: name and time. */
	FKFlickrContactsGetListError_SSLIsRequired = 95,		 /* SSL is required to access the Flickr API. */
	FKFlickrContactsGetListError_InvalidSignature = 96,		 /* The passed signature was invalid. */
	FKFlickrContactsGetListError_MissingSignature = 97,		 /* The call required signing but no signature was sent. */
	FKFlickrContactsGetListError_LoginFailedOrInvalidAuthToken = 98,		 /* The login details or auth token passed were invalid. */
	FKFlickrContactsGetListError_UserNotLoggedInOrInsufficientPermissions = 99,		 /* The method requires user authentication but the user was not logged in, or the authenticated method call did not have the required permissions. */
	FKFlickrContactsGetListError_InvalidAPIKey = 100,		 /* The API key passed was not valid or has expired. */
	FKFlickrContactsGetListError_ServiceCurrentlyUnavailable = 105,		 /* The requested service is temporarily unavailable. */
	FKFlickrContactsGetListError_WriteOperationFailed = 106,		 /* The requested operation failed due to a temporary issue. */
	FKFlickrContactsGetListError_FormatXXXNotFound = 111,		 /* The requested response format was not found. */
	FKFlickrContactsGetListError_MethodXXXNotFound = 112,		 /* The requested method was not found. */
	FKFlickrContactsGetListError_InvalidSOAPEnvelope = 114,		 /* The SOAP envelope send in the request could not be parsed. */
	FKFlickrContactsGetListError_InvalidXMLRPCMethodCall = 115,		 /* The XML-RPC request document could not be parsed. */
	FKFlickrContactsGetListError_BadURLFound = 116,		 /* One or more arguments contained a URL that has been used for abuse on Flickr. */

} FKFlickrContactsGetListError;

/*

Get a list of contacts for the calling user.


Response:

<contacts page="1" pages="1" perpage="1000" total="3">
	<contact nsid="12037949629@N01" username="Eric" iconserver="1"
		realname="Eric Costello"
		friend="1" family="0" ignored="1" /> 
	<contact nsid="12037949631@N01" username="neb" iconserver="1"
		realname="Ben Cerveny"
		friend="0" family="0" ignored="0" /> 
	<contact nsid="41578656547@N01" username="cal_abc" iconserver="1"
		realname="Cal Henderson"
		friend="1" family="1" ignored="0" />
</contacts>

*/
@interface FKFlickrContactsGetList : NSObject <FKFlickrAPIMethod>

/* An optional filter of the results. The following values are valid:<br />
&nbsp;
<dl>
	<dt><b><code>friends</code></b></dt>
	<dl>Only contacts who are friends (and not family)</dl>

	<dt><b><code>family</code></b></dt>
	<dl>Only contacts who are family (and not friends)</dl>

	<dt><b><code>both</code></b></dt>
	<dl>Only contacts who are both friends and family</dl>

	<dt><b><code>neither</code></b></dt>
	<dl>Only contacts who are neither friends nor family</dl>
</dl> */
@property (nonatomic, copy) NSString *filter;

/* The page of results to return. If this argument is omitted, it defaults to 1. */
@property (nonatomic, copy) NSString *page;

/* Number of photos to return per page. If this argument is omitted, it defaults to 1000. The maximum allowed value is 1000. */
@property (nonatomic, copy) NSString *per_page;

/* The order in which to sort the returned contacts. Defaults to name. The possible values are: name and time. */
@property (nonatomic, copy) NSString *sort;


@end
