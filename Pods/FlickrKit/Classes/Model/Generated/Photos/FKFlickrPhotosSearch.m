//
//  FKFlickrPhotosSearch.m
//  FlickrKit
//
//  Generated by FKAPIBuilder on 19 Sep, 2014 at 10:49.
//  Copyright (c) 2013 DevedUp Ltd. All rights reserved. http://www.devedup.com
//
//  DO NOT MODIFY THIS FILE - IT IS MACHINE GENERATED


#import "FKFlickrPhotosSearch.h" 

@implementation FKFlickrPhotosSearch



- (BOOL) needsLogin {
    return NO;
}

- (BOOL) needsSigning {
    return NO;
}

- (FKPermission) requiredPerms {
    return -1;
}

- (NSString *) name {
    return @"flickr.photos.search";
}

- (BOOL) isValid:(NSError **)error {
    BOOL valid = YES;
	NSMutableString *errorDescription = [[NSMutableString alloc] initWithString:@"You are missing required params: "];

	if(error != NULL) {
		if(!valid) {	
			NSDictionary *userInfo = @{NSLocalizedDescriptionKey: errorDescription};
			*error = [NSError errorWithDomain:FKFlickrKitErrorDomain code:FKErrorInvalidArgs userInfo:userInfo];
		}
	}
    return valid;
}

- (NSDictionary *) args {
    NSMutableDictionary *args = [NSMutableDictionary dictionary];
	if(self.user_id) {
		[args setValue:self.user_id forKey:@"user_id"];
	}
	if(self.tags) {
		[args setValue:self.tags forKey:@"tags"];
	}
	if(self.tag_mode) {
		[args setValue:self.tag_mode forKey:@"tag_mode"];
	}
	if(self.text) {
		[args setValue:self.text forKey:@"text"];
	}
	if(self.min_upload_date) {
		[args setValue:self.min_upload_date forKey:@"min_upload_date"];
	}
	if(self.max_upload_date) {
		[args setValue:self.max_upload_date forKey:@"max_upload_date"];
	}
	if(self.min_taken_date) {
		[args setValue:self.min_taken_date forKey:@"min_taken_date"];
	}
	if(self.max_taken_date) {
		[args setValue:self.max_taken_date forKey:@"max_taken_date"];
	}
	if(self.license) {
		[args setValue:self.license forKey:@"license"];
	}
	if(self.sort) {
		[args setValue:self.sort forKey:@"sort"];
	}
	if(self.privacy_filter) {
		[args setValue:self.privacy_filter forKey:@"privacy_filter"];
	}
	if(self.bbox) {
		[args setValue:self.bbox forKey:@"bbox"];
	}
	if(self.accuracy) {
		[args setValue:self.accuracy forKey:@"accuracy"];
	}
	if(self.safe_search) {
		[args setValue:self.safe_search forKey:@"safe_search"];
	}
	if(self.content_type) {
		[args setValue:self.content_type forKey:@"content_type"];
	}
	if(self.machine_tags) {
		[args setValue:self.machine_tags forKey:@"machine_tags"];
	}
	if(self.machine_tag_mode) {
		[args setValue:self.machine_tag_mode forKey:@"machine_tag_mode"];
	}
	if(self.group_id) {
		[args setValue:self.group_id forKey:@"group_id"];
	}
	if(self.contacts) {
		[args setValue:self.contacts forKey:@"contacts"];
	}
	if(self.woe_id) {
		[args setValue:self.woe_id forKey:@"woe_id"];
	}
	if(self.place_id) {
		[args setValue:self.place_id forKey:@"place_id"];
	}
	if(self.media) {
		[args setValue:self.media forKey:@"media"];
	}
	if(self.has_geo) {
		[args setValue:self.has_geo forKey:@"has_geo"];
	}
	if(self.geo_context) {
		[args setValue:self.geo_context forKey:@"geo_context"];
	}
	if(self.lat) {
		[args setValue:self.lat forKey:@"lat"];
	}
	if(self.lon) {
		[args setValue:self.lon forKey:@"lon"];
	}
	if(self.radius) {
		[args setValue:self.radius forKey:@"radius"];
	}
	if(self.radius_units) {
		[args setValue:self.radius_units forKey:@"radius_units"];
	}
	if(self.is_commons) {
		[args setValue:self.is_commons forKey:@"is_commons"];
	}
	if(self.in_gallery) {
		[args setValue:self.in_gallery forKey:@"in_gallery"];
	}
	if(self.is_getty) {
		[args setValue:self.is_getty forKey:@"is_getty"];
	}
	if(self.extras) {
		[args setValue:self.extras forKey:@"extras"];
	}
	if(self.per_page) {
		[args setValue:self.per_page forKey:@"per_page"];
	}
	if(self.page) {
		[args setValue:self.page forKey:@"page"];
	}

    return [args copy];
}

- (NSString *) descriptionForError:(NSInteger)error {
    switch(error) {
		case FKFlickrPhotosSearchError_TooManyTagsInALLQuery:
			return @"Too many tags in ALL query";
		case FKFlickrPhotosSearchError_UnknownUser:
			return @"Unknown user";
		case FKFlickrPhotosSearchError_ParameterlessSearchesHaveBeenDisabled:
			return @"Parameterless searches have been disabled";
		case FKFlickrPhotosSearchError_YouDontHavePermissionToViewThisPool:
			return @"You don't have permission to view this pool";
		case FKFlickrPhotosSearchError_SorryTheFlickrSearchAPIIsNotCurrentlyAvailable:
			return @"Sorry, the Flickr search API is not currently available.";
		case FKFlickrPhotosSearchError_NoValidMachineTags:
			return @"No valid machine tags";
		case FKFlickrPhotosSearchError_ExceededMaximumAllowableMachineTags:
			return @"Exceeded maximum allowable machine tags";
		case FKFlickrPhotosSearchError_Jump_toNotAvaiableForThisQuery:
			return @"jump_to not avaiable for this query";
		case FKFlickrPhotosSearchError_BadValueForJump_to:
			return @"Bad value for jump_to";
		case FKFlickrPhotosSearchError_PhotoNotFound:
			return @"Photo not found";
		case FKFlickrPhotosSearchError_YouCanOnlySearchWithinYourOwnFavorites:
			return @"You can only search within your own favorites";
		case FKFlickrPhotosSearchError_YouCanOnlySearchWithinYourOwnContacts:
			return @"You can only search within your own contacts";
		case FKFlickrPhotosSearchError_IllogicalArguments:
			return @"Illogical arguments";
		case FKFlickrPhotosSearchError_ExcessivePhotoOffsetInSearch:
			return @"Excessive photo offset in search";
		case FKFlickrPhotosSearchError_InvalidAPIKey:
			return @"Invalid API Key";
		case FKFlickrPhotosSearchError_ServiceCurrentlyUnavailable:
			return @"Service currently unavailable";
		case FKFlickrPhotosSearchError_WriteOperationFailed:
			return @"Write operation failed";
		case FKFlickrPhotosSearchError_FormatXXXNotFound:
			return @"Format \"xxx\" not found";
		case FKFlickrPhotosSearchError_MethodXXXNotFound:
			return @"Method \"xxx\" not found";
		case FKFlickrPhotosSearchError_InvalidSOAPEnvelope:
			return @"Invalid SOAP envelope";
		case FKFlickrPhotosSearchError_InvalidXMLRPCMethodCall:
			return @"Invalid XML-RPC Method Call";
		case FKFlickrPhotosSearchError_BadURLFound:
			return @"Bad URL found";
  
		default:
			return @"Unknown error code";
    }
}

@end
