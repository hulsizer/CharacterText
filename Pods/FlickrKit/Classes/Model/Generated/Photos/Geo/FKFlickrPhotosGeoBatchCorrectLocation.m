//
//  FKFlickrPhotosGeoBatchCorrectLocation.m
//  FlickrKit
//
//  Generated by FKAPIBuilder on 19 Sep, 2014 at 10:49.
//  Copyright (c) 2013 DevedUp Ltd. All rights reserved. http://www.devedup.com
//
//  DO NOT MODIFY THIS FILE - IT IS MACHINE GENERATED


#import "FKFlickrPhotosGeoBatchCorrectLocation.h" 

@implementation FKFlickrPhotosGeoBatchCorrectLocation



- (BOOL) needsLogin {
    return YES;
}

- (BOOL) needsSigning {
    return YES;
}

- (FKPermission) requiredPerms {
    return 1;
}

- (NSString *) name {
    return @"flickr.photos.geo.batchCorrectLocation";
}

- (BOOL) isValid:(NSError **)error {
    BOOL valid = YES;
	NSMutableString *errorDescription = [[NSMutableString alloc] initWithString:@"You are missing required params: "];
	if(!self.lat) {
		valid = NO;
		[errorDescription appendString:@"'lat', "];
	}
	if(!self.lon) {
		valid = NO;
		[errorDescription appendString:@"'lon', "];
	}
	if(!self.accuracy) {
		valid = NO;
		[errorDescription appendString:@"'accuracy', "];
	}

	if(error != NULL) {
		if(!valid) {	
			NSDictionary *userInfo = @{NSLocalizedDescriptionKey: errorDescription};
			*error = [NSError errorWithDomain:FKFlickrKitErrorDomain code:FKErrorInvalidArgs userInfo:userInfo];
		}
	}
    return valid;
}

- (NSDictionary *) args {
    NSMutableDictionary *args = [NSMutableDictionary dictionary];
	if(self.lat) {
		[args setValue:self.lat forKey:@"lat"];
	}
	if(self.lon) {
		[args setValue:self.lon forKey:@"lon"];
	}
	if(self.accuracy) {
		[args setValue:self.accuracy forKey:@"accuracy"];
	}
	if(self.place_id) {
		[args setValue:self.place_id forKey:@"place_id"];
	}
	if(self.woe_id) {
		[args setValue:self.woe_id forKey:@"woe_id"];
	}

    return [args copy];
}

- (NSString *) descriptionForError:(NSInteger)error {
    switch(error) {
		case FKFlickrPhotosGeoBatchCorrectLocationError_RequiredArgumentsMissing:
			return @"Required arguments missing";
		case FKFlickrPhotosGeoBatchCorrectLocationError_NotAValidLatitude:
			return @"Not a valid latitude";
		case FKFlickrPhotosGeoBatchCorrectLocationError_NotAValidLongitude:
			return @"Not a valid longitude";
		case FKFlickrPhotosGeoBatchCorrectLocationError_NotAValidAccuracy:
			return @"Not a valid accuracy";
		case FKFlickrPhotosGeoBatchCorrectLocationError_NotAValidPlacesID:
			return @"Not a valid Places ID";
		case FKFlickrPhotosGeoBatchCorrectLocationError_NoPhotosGeotaggedAtThatLocation:
			return @"No photos geotagged at that location";
		case FKFlickrPhotosGeoBatchCorrectLocationError_SSLIsRequired:
			return @"SSL is required";
		case FKFlickrPhotosGeoBatchCorrectLocationError_InvalidSignature:
			return @"Invalid signature";
		case FKFlickrPhotosGeoBatchCorrectLocationError_MissingSignature:
			return @"Missing signature";
		case FKFlickrPhotosGeoBatchCorrectLocationError_LoginFailedOrInvalidAuthToken:
			return @"Login failed / Invalid auth token";
		case FKFlickrPhotosGeoBatchCorrectLocationError_UserNotLoggedInOrInsufficientPermissions:
			return @"User not logged in / Insufficient permissions";
		case FKFlickrPhotosGeoBatchCorrectLocationError_InvalidAPIKey:
			return @"Invalid API Key";
		case FKFlickrPhotosGeoBatchCorrectLocationError_ServiceCurrentlyUnavailable:
			return @"Service currently unavailable";
		case FKFlickrPhotosGeoBatchCorrectLocationError_WriteOperationFailed:
			return @"Write operation failed";
		case FKFlickrPhotosGeoBatchCorrectLocationError_FormatXXXNotFound:
			return @"Format \"xxx\" not found";
		case FKFlickrPhotosGeoBatchCorrectLocationError_MethodXXXNotFound:
			return @"Method \"xxx\" not found";
		case FKFlickrPhotosGeoBatchCorrectLocationError_InvalidSOAPEnvelope:
			return @"Invalid SOAP envelope";
		case FKFlickrPhotosGeoBatchCorrectLocationError_InvalidXMLRPCMethodCall:
			return @"Invalid XML-RPC Method Call";
		case FKFlickrPhotosGeoBatchCorrectLocationError_BadURLFound:
			return @"Bad URL found";
  
		default:
			return @"Unknown error code";
    }
}

@end
