//
//  FKFlickrPlacesTagsForPlace.h
//  FlickrKit
//
//  Generated by FKAPIBuilder on 19 Sep, 2014 at 10:49.
//  Copyright (c) 2013 DevedUp Ltd. All rights reserved. http://www.devedup.com
//
//  DO NOT MODIFY THIS FILE - IT IS MACHINE GENERATED


#import "FKFlickrAPIMethod.h"

typedef enum {
	FKFlickrPlacesTagsForPlaceError_RequiredParameterMissing = 1,		 /* One or more parameters was not included with the API request */
	FKFlickrPlacesTagsForPlaceError_NotAValidPlacesID = 2,		 /* An invalid Places (or WOE) identifier was included with your request. */
	FKFlickrPlacesTagsForPlaceError_PlaceNotFound = 3,		 /* An invalid Places (or WOE) identifier was included with your request. */
	FKFlickrPlacesTagsForPlaceError_InvalidAPIKey = 100,		 /* The API key passed was not valid or has expired. */
	FKFlickrPlacesTagsForPlaceError_ServiceCurrentlyUnavailable = 105,		 /* The requested service is temporarily unavailable. */
	FKFlickrPlacesTagsForPlaceError_WriteOperationFailed = 106,		 /* The requested operation failed due to a temporary issue. */
	FKFlickrPlacesTagsForPlaceError_FormatXXXNotFound = 111,		 /* The requested response format was not found. */
	FKFlickrPlacesTagsForPlaceError_MethodXXXNotFound = 112,		 /* The requested method was not found. */
	FKFlickrPlacesTagsForPlaceError_InvalidSOAPEnvelope = 114,		 /* The SOAP envelope send in the request could not be parsed. */
	FKFlickrPlacesTagsForPlaceError_InvalidXMLRPCMethodCall = 115,		 /* The XML-RPC request document could not be parsed. */
	FKFlickrPlacesTagsForPlaceError_BadURLFound = 116,		 /* One or more arguments contained a URL that has been used for abuse on Flickr. */

} FKFlickrPlacesTagsForPlaceError;

/*

Return a list of the top 100 unique tags for a Flickr Places or Where on Earth (WOE) ID


Response:

<tags total="100">
   <tag count="31775">montreal</tag>
   <tag count="20585">canada</tag>
   <tag count="12319">montréal</tag>
   <tag count="12154">quebec</tag>
   <tag count="6471">québec</tag>
   <tag count="2173">sylvainmichaud</tag>
   <tag count="2091">nikon</tag>
   <tag count="1541">lucbus</tag>
   <tag count="1539">music</tag>
   <tag count="1479">urban</tag>
   <tag count="1425">lucbussieres</tag>
   <tag count="1419">festival</tag>
   <!-- and so on -->
</tags>

*/
@interface FKFlickrPlacesTagsForPlace : NSObject <FKFlickrAPIMethod>

/* A Where on Earth identifier to use to filter photo clusters.<br /><br />
<span style="font-style:italic;">(While optional, you must pass either a valid Places ID or a WOE ID.)</span> */
@property (nonatomic, copy) NSString *woe_id;

/* A Flickr Places identifier to use to filter photo clusters.<br /><br />
<span style="font-style:italic;">(While optional, you must pass either a valid Places ID or a WOE ID.)</span> */
@property (nonatomic, copy) NSString *place_id;

/* Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date should be in the form of a unix timestamp. */
@property (nonatomic, copy) NSString *min_upload_date;

/* Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date should be in the form of a unix timestamp. */
@property (nonatomic, copy) NSString *max_upload_date;

/* Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date should be in the form of a mysql datetime. */
@property (nonatomic, copy) NSString *min_taken_date;

/* Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date should be in the form of a mysql datetime. */
@property (nonatomic, copy) NSString *max_taken_date;


@end
