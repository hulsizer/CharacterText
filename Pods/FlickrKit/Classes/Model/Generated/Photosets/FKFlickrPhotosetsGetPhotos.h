//
//  FKFlickrPhotosetsGetPhotos.h
//  FlickrKit
//
//  Generated by FKAPIBuilder on 19 Sep, 2014 at 10:49.
//  Copyright (c) 2013 DevedUp Ltd. All rights reserved. http://www.devedup.com
//
//  DO NOT MODIFY THIS FILE - IT IS MACHINE GENERATED


#import "FKFlickrAPIMethod.h"

typedef enum {
	FKFlickrPhotosetsGetPhotosError_PhotosetNotFound = 1,		 /* The photoset id passed was not a valid photoset id. */
	FKFlickrPhotosetsGetPhotosError_InvalidAPIKey = 100,		 /* The API key passed was not valid or has expired. */
	FKFlickrPhotosetsGetPhotosError_ServiceCurrentlyUnavailable = 105,		 /* The requested service is temporarily unavailable. */
	FKFlickrPhotosetsGetPhotosError_WriteOperationFailed = 106,		 /* The requested operation failed due to a temporary issue. */
	FKFlickrPhotosetsGetPhotosError_FormatXXXNotFound = 111,		 /* The requested response format was not found. */
	FKFlickrPhotosetsGetPhotosError_MethodXXXNotFound = 112,		 /* The requested method was not found. */
	FKFlickrPhotosetsGetPhotosError_InvalidSOAPEnvelope = 114,		 /* The SOAP envelope send in the request could not be parsed. */
	FKFlickrPhotosetsGetPhotosError_InvalidXMLRPCMethodCall = 115,		 /* The XML-RPC request document could not be parsed. */
	FKFlickrPhotosetsGetPhotosError_BadURLFound = 116,		 /* One or more arguments contained a URL that has been used for abuse on Flickr. */

} FKFlickrPhotosetsGetPhotosError;

/*

Get the list of photos in a set.


Response:

<photoset id="4" primary="2483" page="1" perpage="500" pages="1" total="2">
	<photo id="2484" secret="123456" server="1"
		title="my photo" isprimary="0" /> 
	<photo id="2483" secret="123456" server="1"
		title="flickr rocks" isprimary="1" /> 
</photoset>

*/
@interface FKFlickrPhotosetsGetPhotos : NSObject <FKFlickrAPIMethod>

/* The id of the photoset to return the photos for. */
@property (nonatomic, copy) NSString *photoset_id; /* (Required) */

/* A comma-delimited list of extra information to fetch for each returned record. Currently supported fields are: license, date_upload, date_taken, owner_name, icon_server, original_format, last_update, geo, tags, machine_tags, o_dims, views, media, path_alias, url_sq, url_t, url_s, url_m, url_o */
@property (nonatomic, copy) NSString *extras;

/* Return photos only matching a certain privacy level. This only applies when making an authenticated call to view a photoset you own. Valid values are:
<ul>
<li>1 public photos</li>
<li>2 private photos visible to friends</li>
<li>3 private photos visible to family</li>
<li>4 private photos visible to friends &amp; family</li>
<li>5 completely private photos</li>
</ul>
 */
@property (nonatomic, copy) NSString *privacy_filter;

/* Number of photos to return per page. If this argument is omitted, it defaults to 500. The maximum allowed value is 500. */
@property (nonatomic, copy) NSString *per_page;

/* The page of results to return. If this argument is omitted, it defaults to 1. */
@property (nonatomic, copy) NSString *page;

/* Filter results by media type. Possible values are <code>all</code> (default), <code>photos</code> or <code>videos</code> */
@property (nonatomic, copy) NSString *media;


@end
